# -------------------------------------------- IMPORT PACKAGES AND DATASETS --------------------------------------------
#region
import geopandas as gpd
import pandas as pd
from shapely.geometry import Point, LineString
import matplotlib.pyplot as plt

# Load your GeoDataFrame
gdf = gpd.read_file("roadway_20250217/geo_export_66b478e7-fd9d-4ef7-96d9-8d13ee6be99a.shp")
print(gdf.columns)

# Check if 'segment_id' and 'full_name' are columns; if not, replace with actual column names in your GDF
if 'segment_id' not in gdf.columns or 'full_name' not in gdf.columns:
    raise ValueError("Required columns are missing in the GeoDataFrame.")

#endregion

# ----------------------------------------------- IDENTIFY INTERSECTIONS -----------------------------------------------
#region

# Function to extract points, segment_ids, and full_names from each line feature
def extract_details(row):
    # Create a tuple for each coordinate that includes the point, segment_id, and full_name
    return [(Point(x, y), row['segment_id'], row['full_name']) for (x, y) in row.geometry.coords]

# Apply the function and create a list of tuples
details = gdf.apply(extract_details, axis=1).explode().reset_index(drop=True)
points, segment_ids, full_names = zip(*details)  # Unpack points, segment_ids, and full_names into separate lists

# Create a new GeoDataFrame for the points with segment_ids and full_names
details_gdf = gpd.GeoDataFrame({
    'geometry': points,
    'segment_id': segment_ids,
    'full_name': full_names
}, crs=gdf.crs)

# Group by geometry to find unique segment_ids and full_names for each point
unique_details_per_point = details_gdf.groupby('geometry').agg({
    'segment_id': lambda x: x.unique(),
    'full_name': lambda x: x.unique()
})

# Print the unique segment_ids and full_names for each point
print(unique_details_per_point)

#endregion

# --------------------=--------------------- LINK INTERSECTIONS TO ROADNETWORK -----------------------------------------
#region

print(f"LINK INTERSECTIONS TO ROADNETWORK: ")

# Create a spatial index for the GeoDataFrame to optimize intersection queries
spatial_index = gdf.sindex

# List to store intersections along with their corresponding road names
intersections = []

# Iterate over each segment in the GeoDataFrame
for index, segment in gdf.iterrows():
    # Possible index of intersecting geometries
    possible_matches_index = list(spatial_index.intersection(segment['geometry'].bounds))
    # Extract those geometries from the DataFrame
    possible_matches = gdf.iloc[possible_matches_index]
    # Check for actual intersection (excluding self-intersection)
    precise_matches = possible_matches[possible_matches['geometry'].intersects(segment['geometry']) & (possible_matches['segment_id'] != segment['segment_id'])]
    # Store the results: segment_id, full_name, and the IDs and names of intersecting segments
    intersections.append({
        'Segment_ID': segment['segment_id'],
        'Road_Name': segment['full_name'],
        'Intersecting_Segment_IDs': list(precise_matches['segment_id']),
        'Intersecting_Road_Names': list(precise_matches['full_name'])
    })

# Create a DataFrame from the list of intersections
intersections_df = pd.DataFrame(intersections)

# Remove rows with no intersecting segments (empty lists)
intersections_df = intersections_df[intersections_df['Intersecting_Segment_IDs'].apply(lambda x: len(x) > 0)]

# Convert list of intersecting segment IDs and road names to plain text
intersections_df['Intersecting_Segment_IDs'] = intersections_df['Intersecting_Segment_IDs'].apply(lambda x: ', '.join(map(str, x)))
intersections_df['Intersecting_Road_Names'] = intersections_df['Intersecting_Road_Names'].apply(lambda x: ', '.join(x))

# Function to filter out road names from the intersecting road names
def filter_road_names(row):
    # Split intersecting road names into a list
    intersecting_names = row['Intersecting_Road_Names'].split(', ')
    # Filter out the road name that matches the segment's own road name
    filtered_names = [name for name in intersecting_names if name != row['Road_Name']]
    # Join the filtered names back into a single string
    return ', '.join(filtered_names)

# Apply the function to each row of the DataFrame
intersections_df['Intersecting_Road_Names'] = intersections_df.apply(filter_road_names, axis=1)

# Function to filter out duplicates and the segment's own road name from the intersecting road names
def filter_road_names(row):
    # Split intersecting road names into a list
    intersecting_names = row['Intersecting_Road_Names'].split(', ')
    # Remove duplicates by converting the list to a set, then back to a list
    unique_names = list(set(intersecting_names))
    # Filter out the road name that matches the segment's own road name
    filtered_names = [name for name in unique_names if name != row['Road_Name']]
    # Join the filtered names back into a single string
    return ', '.join(filtered_names)

# Apply the function to each row of the DataFrame
intersections_df['Intersecting_Road_Names'] = intersections_df.apply(filter_road_names, axis=1)

# Set display options
pd.set_option('display.max_columns', None)  # Ensure all columns are shown
pd.set_option('display.max_colwidth', None)  # Display full content of each column
pd.set_option('display.width', None)  # Use maximum width for displaying each column

# Print the DataFrame with intersecting segments and their corresponding road names
print(intersections_df)

#endregion

# Function to distribute intersecting road names into three new columns
def distribute_road_names(row):
    # Split intersecting road names into a list
    names = row['Intersecting_Road_Names'].split(', ')
    # Assign the first name to 'Street From', second to 'Street To', and the rest to 'Street Extra'
    row['Street From'] = names[0] if len(names) > 0 else ''
    row['Street To'] = names[1] if len(names) > 1 else ''
    row['Street Extra'] = ', '.join(names[2:]) if len(names) > 2 else ''
    return row

# Apply the function to each row of the DataFrame and update it
intersections_df = intersections_df.apply(distribute_road_names, axis=1)

# Print the updated DataFrame with the new columns
print(intersections_df[['Segment_ID', 'Road_Name', 'Street From', 'Street To', 'Street Extra']])
